generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  Male
  Female
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  gender                Gender?                @default(Male)
  phone                 String?
  location              String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Salat                 Salat?
  Dua                   Dua?
  Zikir                 Zikir?
  QuranRecitation       QuranRecitation?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum Salah {
  Fajr
  Zuhr
  Asr
  Maghrib
  Isha
  Witr
}

enum Priority {
  Farz
  Wajib
  Sunnah
  Nafal
  Janazah
}

model Salat {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  time         Salah
  priority     Priority
  complete     Boolean  @default(false)
  jamat        Boolean? @default(false)
  firstTakbeer Boolean? @default(false)

  @@unique([userId])
}

model Dua {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  dua         String
  translation String
  description String?
  hadith      String?
  ayat        String?
  time        Salah?
  complete    Boolean @default(false)
  beforeSalah String?
  afterSalah  String?

  @@unique([userId])
}

model Zikir {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  zikir       String
  translation String
  description String?
  hadith      String?
  ayat        String?
  time        Salah?
  complete    Boolean @default(false)
  beforeSalah String?
  afterSalah  String?

  @@unique([userId])
}

model QuranRecitation {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  verse       String?
  page        String?
  para        String?
  beforeSalah String?
  afterSalah  String?

  @@unique([userId])
}
